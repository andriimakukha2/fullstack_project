import Message from '../models/Message.js';
import redis from 'redis';

// üîß –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ Redis
const client = redis.createClient();

// üì© –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
export const sendMessage = async (req, res, next) => {
    try {
        const { recipient, text } = req.body;
        const sender = req.user.userId;

        if (!text) {
            return res.status(400).json({ message: '–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º' });
        }

        const message = new Message({ sender, recipient, text });
        await message.save();

        // üßπ –û—á–∏—â–∞—î–º–æ –∫–µ—à, —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        client.del(`messages:${sender}:${recipient}`);
        client.del(`messages:${recipient}:${sender}`);

        // üì° WebSocket-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (—è–∫—â–æ –æ—Ç—Ä–∏–º—É–≤–∞—á –æ–Ω–ª–∞–π–Ω)
        if (global.onlineUsers && global.onlineUsers.has(recipient)) {
            global.onlineUsers.get(recipient).send(JSON.stringify(message));
        }

        res.status(201).json(message);
    } catch (error) {
        next(error);
    }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ–∂ –¥–≤–æ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
export const getMessages = async (req, res, next) => {
    try {
        const userId = req.user.userId;
        const { recipientId } = req.params;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à Redis
        client.get(`messages:${userId}:${recipientId}`, async (err, cachedMessages) => {
            if (cachedMessages) {
                return res.json(JSON.parse(cachedMessages));
            } else {
                const messages = await Message.find({
                    $or: [
                        { sender: userId, recipient: recipientId },
                        { sender: recipientId, recipient: userId }
                    ]
                }).sort({ createdAt: 1 });

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à Redis –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
                client.setex(`messages:${userId}:${recipientId}`, 60, JSON.stringify(messages));

                res.json(messages);
            }
        });

    } catch (error) {
        next(error);
    }
};
