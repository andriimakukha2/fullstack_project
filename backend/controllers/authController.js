import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';

// –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –¥–ª—è JWT
const SECRET_KEY = process.env.JWT_SECRET || 'fallbackSecretKey';

// ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const register = async (req, res, next) => {
    try {
        const { username, email, password } = req.body;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π email –∞–±–æ username
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: '–¢–∞–∫–∏–π email –≤–∂–µ —ñ—Å–Ω—É—î' });
        }

        const existingUsername = await User.findOne({ username });
        if (existingUsername) {
            return res.status(400).json({ message: '–¢–∞–∫–∏–π username –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π' });
        }

        // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        const hashedPassword = await bcrypt.hash(password, 10);

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const newUser = new User({ username, email, password: hashedPassword, role: 'user' });
        await newUser.save();

        // üî• –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign({ userId: newUser._id, role: 'user' }, SECRET_KEY, { expiresIn: '7d' });

        console.log('‚úÖ –¢–æ–∫–µ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ:', token);

        // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ + —Ç–æ–∫–µ–Ω
        res.status(201).json({
            user: { id: newUser._id, username: newUser.username, email: newUser.email, role: 'user' },
            token
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
        next(error); // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ middleware errorHandler
    }
};

// ‚úÖ –í—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const login = async (req, res, next) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å' });
        }

        // üî• –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign({ userId: user._id, role: user.role }, SECRET_KEY, { expiresIn: '7d' });

        // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ + —Ç–æ–∫–µ–Ω
        res.json({
            user: { id: user._id, username: user.username, email: user.email, role: user.role },
            token
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
        next(error);
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞—Ö–∏—â–µ–Ω–æ)
export const getUserProfile = async (req, res, next) => {
    try {
        const user = await User.findById(req.user.userId).select('-password');
        if (!user) {
            return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
        }

        res.json(user);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error);
        next(error);
    }
};
